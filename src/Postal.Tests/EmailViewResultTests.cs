using System;
using System.IO;
using System.Net.Mail;
using Moq;
using Xunit;

namespace Postal
{
    public class EmailViewResultTests
    {
        [Fact]
        public void ExecuteResult_should_write()
        {
            var result = Create(SimpleTextOutput);
            var output = GetOutput(result);
            Assert.NotEmpty(output);
        }
        
        [Fact]
        public void ExecuteResult_returns_text_content_type()
        {
            var result = Create(SimpleTextOutput);
            var contentType = result.ExecuteResult(TextWriter.Null);
            Assert.Equal("text/plain", contentType);
        }

        [Fact]
        public void ExecuteResult_should_write_correctly()
        {
            var result = Create(SimpleTextOutput);
            var output = GetOutput(result);
            Assert.Equal(SimpleTextOutput, output);
        }

        [Fact]
        public void ExecuteResult_on_html_writers_header_in_comment()
        {
            var result = Create(SimpleHtmlOutput);
            var output = GetOutput(result);
            Assert.Contains("<!--" + Environment.NewLine + 
                            "To: test@example.org" + Environment.NewLine + 
                            "From: test@example.org" + Environment.NewLine + 
                            "Subject: Simple email example" + Environment.NewLine + 
                            Environment.NewLine + 
                            "-->", output);
        }
        
        [Fact]
        public void ExecuteResult_on_html_returns_html_content_type()
        {
            var result = Create(SimpleHtmlOutput);
            var contentType = result.ExecuteResult(TextWriter.Null);
            Assert.Equal("text/html", contentType);
        }

        [Fact]
        public void ExecuteResult_with_text_format_on_html_fails()
        {
            var result = Create(SimpleHtmlOutput);
            Assert.Throws<NotSupportedException>(() => GetOutput(result, "text"));
        }
        
        [Fact]
        public void ExecuteResult_with_html_format_on_text_fails()
        {
            var result = Create(SimpleTextOutput);
            Assert.Throws<NotSupportedException>(() => GetOutput(result, "html"));
        }

        [Fact]
        public void ExecuteResult_on_multipart_without_format_renders_default()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var output = GetOutput(result);
            Assert.Equal(MultiPartOutput, output);
        }
        
        [Fact]
        public void ExecuteResult_on_multipart_without_format_returns_text_content_type()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var contentType = result.ExecuteResult(TextWriter.Null);
            Assert.Equal("text/plain", contentType);
        }
        
        [Fact]
        public void ExecuteResult_on_multipart_with_text_format_renders_text()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var output = GetOutput(result, format: "text");
            Assert.Equal(@"This is a plain text message

Generated by Postal on 2014/06/20", output);
        }
        
        [Fact]
        public void ExecuteResult_on_multipart_with_html_format_renders_html()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var output = GetOutput(result, format: "html");
            Assert.Equal(@"<html>
    <body>
        <p>This is an <code>HTML</code> message</p>
        <p>Generated by <a href=""http://aboutcode.net/postal"">Postal</a> on @ViewBag.Date</p>        
    </body>
</html>", output);
        }

        [Fact]
        public void ExecuteResult_on_multipart_with_html_format_returns_html_content_type()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var contentType = result.ExecuteResult(TextWriter.Null, "html");
            Assert.Equal("text/html", contentType);
        }
        
        [Fact]
        public void ExecuteResult_on_multipart_with_text_format_returns_text_content_type()
        {
            var result = Create(MultiPartOutput, MultiPartTextOutput, MultiPartHtmlOutput);
            var contentType = result.ExecuteResult(TextWriter.Null, "text");
            Assert.Equal("text/plain", contentType);
        }

        [Fact]
        public void ReplaceLinkedImagesWithEmbeddedImages_replaces_cid_reference()
        {
            var embedder = new ImageEmbedder();
            var resource = embedder.ReferenceImage("postal.png");

            string body = "<img src=\"cid:" + resource.ContentId + @"""/>";
            var view = AlternateView.CreateAlternateViewFromString(body);
            embedder.AddImagesToView(view);
            
            string replaced = TemplateViewResult.ReplaceLinkedImagesWithEmbeddedImages(view, body);
            Assert.DoesNotContain("cid:", replaced);
        }
        
        [Fact]
        public void ReplaceLinkedImagesWithEmbeddedImages_replaces_cid_reference_with_correct_mime()
        {
            var embedder = new ImageEmbedder();
            var resource = embedder.ReferenceImage("postal.png");

            string body = "<img src=\"cid:" + resource.ContentId + @"""/>";
            var view = AlternateView.CreateAlternateViewFromString(body);
            embedder.AddImagesToView(view);
            
            string replaced = TemplateViewResult.ReplaceLinkedImagesWithEmbeddedImages(view, body);
            Assert.Contains("data:image/png;base64,", replaced);
        }
        
        TemplateViewResult Create(string template, string textTemplate = null, string htmlTemplate = null)
        {
            var email = new EmailTemplate("~/Views/Emails/Test.cshtml");
            var renderer = new Mock<ITemplateViewRenderer>();

            renderer.Setup(r => r.Render(email, null)).Returns(template);
            if(!string.IsNullOrEmpty(textTemplate))
                renderer.Setup(r => r.Render(email, "~/Views/Emails/Test.Text.cshtml")).Returns(textTemplate);
            if (!string.IsNullOrEmpty(htmlTemplate))
                renderer.Setup(r => r.Render(email, "~/Views/Emails/Test.Html.cshtml")).Returns(htmlTemplate);

            return new TemplateViewResult(email, renderer.Object, null);
        }

        string GetOutput(TemplateViewResult result, string format = null)
        {
            using (var writer = new StringWriter())
            {
                result.ExecuteResult(writer, format);

                return writer.GetStringBuilder().ToString();
            }
        }

        const string SimpleTextOutput = @"To: test@example.org
From: test@example.org
Subject: Simple email example

Hello, world!

The date is: 2014/06/20";  
        
        const string SimpleHtmlOutput = @"To: test@example.org
From: test@example.org
Subject: Simple email example

<html>
    <body>
        <p>The date is 2014/06/20</p>
    </body>
</html>";

        const string MultiPartOutput = @"To: test@example.org
From: test@example.org
Subject: Multi-part email example
Views: Html,Text";

        const string MultiPartTextOutput = @"Content-Type: text/plain; charset=utf8

This is a plain text message

Generated by Postal on 2014/06/20";
        
        const string MultiPartHtmlOutput = @"Content-Type: text/html; charset=utf8

<html>
    <body>
        <p>This is an <code>HTML</code> message</p>
        <p>Generated by <a href=""http://aboutcode.net/postal"">Postal</a> on @ViewBag.Date</p>        
    </body>
</html>";

       
    }
}
